{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport createChainedFunction from './utils/createChainedFunction';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nvar propTypes = {\n  accordion: PropTypes.bool,\n  activeKey: PropTypes.any,\n  defaultActiveKey: PropTypes.any,\n  onSelect: PropTypes.func,\n  role: PropTypes.string\n};\nvar defaultProps = {\n  accordion: false\n}; // TODO: Use uncontrollable.\n\nvar PanelGroup = function (_React$Component) {\n  _inherits(PanelGroup, _React$Component);\n\n  function PanelGroup(props, context) {\n    _classCallCheck(this, PanelGroup);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleSelect = _this.handleSelect.bind(_this);\n    _this.state = {\n      activeKey: props.defaultActiveKey\n    };\n    return _this;\n  }\n\n  PanelGroup.prototype.handleSelect = function handleSelect(key, e) {\n    e.preventDefault();\n\n    if (this.props.onSelect) {\n      this.props.onSelect(key, e);\n    }\n\n    if (this.state.activeKey === key) {\n      key = null;\n    }\n\n    this.setState({\n      activeKey: key\n    });\n  };\n\n  PanelGroup.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        accordion = _props.accordion,\n        propsActiveKey = _props.activeKey,\n        className = _props.className,\n        children = _props.children,\n        props = _objectWithoutProperties(_props, ['accordion', 'activeKey', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['defaultActiveKey', 'onSelect']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    var activeKey = void 0;\n\n    if (accordion) {\n      activeKey = propsActiveKey != null ? propsActiveKey : this.state.activeKey;\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = getClassSet(bsProps);\n    return React.createElement('div', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), ValidComponentChildren.map(children, function (child) {\n      var childProps = {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      };\n\n      if (accordion) {\n        _Object$assign(childProps, {\n          headerRole: 'tab',\n          panelRole: 'tabpanel',\n          collapsible: true,\n          expanded: child.props.eventKey === activeKey,\n          onSelect: createChainedFunction(_this2.handleSelect, child.props.onSelect)\n        });\n      }\n\n      return cloneElement(child, childProps);\n    }));\n  };\n\n  return PanelGroup;\n}(React.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nexport default bsClass('panel-group', PanelGroup);","map":null,"metadata":{},"sourceType":"module"}