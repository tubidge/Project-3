{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _extends from 'babel-runtime/helpers/extends';\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport splitComponentProps from './utils/splitComponentProps';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\n\nvar propTypes = _extends({}, Dropdown.propTypes, {\n  // Toggle props.\n  title: PropTypes.node.isRequired,\n  noCaret: PropTypes.bool,\n  active: PropTypes.bool,\n  // Override generated docs from <Dropdown>.\n\n  /**\n   * @private\n   */\n  children: PropTypes.node\n});\n\nvar NavDropdown = function (_React$Component) {\n  _inherits(NavDropdown, _React$Component);\n\n  function NavDropdown() {\n    _classCallCheck(this, NavDropdown);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  NavDropdown.prototype.isActive = function isActive(_ref, activeKey, activeHref) {\n    var props = _ref.props;\n\n    var _this2 = this;\n\n    if (props.active || activeKey != null && props.eventKey === activeKey || activeHref && props.href === activeHref) {\n      return true;\n    }\n\n    if (ValidComponentChildren.some(props.children, function (child) {\n      return _this2.isActive(child, activeKey, activeHref);\n    })) {\n      return true;\n    }\n\n    return props.active;\n  };\n\n  NavDropdown.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        title = _props.title,\n        activeKey = _props.activeKey,\n        activeHref = _props.activeHref,\n        className = _props.className,\n        style = _props.style,\n        children = _props.children,\n        props = _objectWithoutProperties(_props, ['title', 'activeKey', 'activeHref', 'className', 'style', 'children']);\n\n    var active = this.isActive(this, activeKey, activeHref);\n    delete props.active; // Accessed via this.isActive().\n\n    delete props.eventKey; // Accessed via this.isActive().\n\n    var _splitComponentProps = splitComponentProps(props, Dropdown.ControlledComponent),\n        dropdownProps = _splitComponentProps[0],\n        toggleProps = _splitComponentProps[1]; // Unlike for the other dropdowns, styling needs to go to the `<Dropdown>`\n    // rather than the `<Dropdown.Toggle>`.\n\n\n    return React.createElement(Dropdown, _extends({}, dropdownProps, {\n      componentClass: 'li',\n      className: classNames(className, {\n        active: active\n      }),\n      style: style\n    }), React.createElement(Dropdown.Toggle, _extends({}, toggleProps, {\n      useAnchor: true\n    }), title), React.createElement(Dropdown.Menu, null, ValidComponentChildren.map(children, function (child) {\n      return React.cloneElement(child, {\n        active: _this3.isActive(child, activeKey, activeHref)\n      });\n    })));\n  };\n\n  return NavDropdown;\n}(React.Component);\n\nNavDropdown.propTypes = propTypes;\nexport default NavDropdown;","map":null,"metadata":{},"sourceType":"module"}