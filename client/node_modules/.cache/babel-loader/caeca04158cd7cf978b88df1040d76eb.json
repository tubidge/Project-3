{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport TransitionEvents from './utils/TransitionEvents'; // TODO: This should use a timeout instead of TransitionEvents, or else just\n// not wait until transition end to trigger continuing animations.\n\nvar propTypes = {\n  direction: PropTypes.oneOf(['prev', 'next']),\n  onAnimateOutEnd: PropTypes.func,\n  active: PropTypes.bool,\n  animateIn: PropTypes.bool,\n  animateOut: PropTypes.bool,\n  index: PropTypes.number\n};\nvar defaultProps = {\n  active: false,\n  animateIn: false,\n  animateOut: false\n};\n\nvar CarouselItem = function (_React$Component) {\n  _inherits(CarouselItem, _React$Component);\n\n  function CarouselItem(props, context) {\n    _classCallCheck(this, CarouselItem);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleAnimateOutEnd = _this.handleAnimateOutEnd.bind(_this);\n    _this.state = {\n      direction: null\n    };\n    _this.isUnmounted = false;\n    return _this;\n  }\n\n  CarouselItem.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.active !== nextProps.active) {\n      this.setState({\n        direction: null\n      });\n    }\n  };\n\n  CarouselItem.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    var active = this.props.active;\n    var prevActive = prevProps.active;\n\n    if (!active && prevActive) {\n      TransitionEvents.addEndEventListener(ReactDOM.findDOMNode(this), this.handleAnimateOutEnd);\n    }\n\n    if (active !== prevActive) {\n      setTimeout(function () {\n        return _this2.startAnimation();\n      }, 20);\n    }\n  };\n\n  CarouselItem.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.isUnmounted = true;\n  };\n\n  CarouselItem.prototype.handleAnimateOutEnd = function handleAnimateOutEnd() {\n    if (this.isUnmounted) {\n      return;\n    }\n\n    if (this.props.onAnimateOutEnd) {\n      this.props.onAnimateOutEnd(this.props.index);\n    }\n  };\n\n  CarouselItem.prototype.startAnimation = function startAnimation() {\n    if (this.isUnmounted) {\n      return;\n    }\n\n    this.setState({\n      direction: this.props.direction === 'prev' ? 'right' : 'left'\n    });\n  };\n\n  CarouselItem.prototype.render = function render() {\n    var _props = this.props,\n        direction = _props.direction,\n        active = _props.active,\n        animateIn = _props.animateIn,\n        animateOut = _props.animateOut,\n        className = _props.className,\n        props = _objectWithoutProperties(_props, ['direction', 'active', 'animateIn', 'animateOut', 'className']);\n\n    delete props.onAnimateOutEnd;\n    delete props.index;\n    var classes = {\n      item: true,\n      active: active && !animateIn || animateOut\n    };\n\n    if (direction && active && animateIn) {\n      classes[direction] = true;\n    }\n\n    if (this.state.direction && (animateIn || animateOut)) {\n      classes[this.state.direction] = true;\n    }\n\n    return React.createElement('div', _extends({}, props, {\n      className: classNames(className, classes)\n    }));\n  };\n\n  return CarouselItem;\n}(React.Component);\n\nCarouselItem.propTypes = propTypes;\nCarouselItem.defaultProps = defaultProps;\nexport default CarouselItem;","map":null,"metadata":{},"sourceType":"module"}