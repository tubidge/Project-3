{"ast":null,"code":"import _Object$values from 'babel-runtime/core-js/object/values';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from './Collapse';\nimport { bsStyles, bsClass, getClassSet, prefix, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport { State, Style } from './utils/StyleConfig'; // TODO: Use uncontrollable.\n\nvar propTypes = {\n  collapsible: PropTypes.bool,\n  onSelect: PropTypes.func,\n  header: PropTypes.node,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  footer: PropTypes.node,\n  defaultExpanded: PropTypes.bool,\n  expanded: PropTypes.bool,\n  eventKey: PropTypes.any,\n  headerRole: PropTypes.string,\n  panelRole: PropTypes.string,\n  // From Collapse.\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\nvar defaultProps = {\n  defaultExpanded: false\n};\n\nvar Panel = function (_React$Component) {\n  _inherits(Panel, _React$Component);\n\n  function Panel(props, context) {\n    _classCallCheck(this, Panel);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleClickTitle = _this.handleClickTitle.bind(_this);\n    _this.state = {\n      expanded: _this.props.defaultExpanded\n    };\n    return _this;\n  }\n\n  Panel.prototype.handleClickTitle = function handleClickTitle(e) {\n    // FIXME: What the heck? This API is horrible. This needs to go away!\n    e.persist();\n    e.selected = true;\n\n    if (this.props.onSelect) {\n      this.props.onSelect(this.props.eventKey, e);\n    } else {\n      e.preventDefault();\n    }\n\n    if (e.selected) {\n      this.setState({\n        expanded: !this.state.expanded\n      });\n    }\n  };\n\n  Panel.prototype.renderAnchor = function renderAnchor(header, id, role, expanded) {\n    return React.createElement('a', {\n      role: role,\n      href: id && '#' + id,\n      onClick: this.handleClickTitle,\n      'aria-controls': id,\n      'aria-expanded': expanded,\n      'aria-selected': expanded,\n      className: expanded ? null : 'collapsed'\n    }, header);\n  };\n\n  Panel.prototype.renderBody = function renderBody(rawChildren, bsProps) {\n    var children = [];\n    var bodyChildren = [];\n    var bodyClassName = prefix(bsProps, 'body');\n\n    function maybeAddBody() {\n      if (!bodyChildren.length) {\n        return;\n      } // Derive the key from the index here, since we need to make one up.\n\n\n      children.push(React.createElement('div', {\n        key: children.length,\n        className: bodyClassName\n      }, bodyChildren));\n      bodyChildren = [];\n    } // Convert to array so we can re-use keys.\n\n\n    React.Children.toArray(rawChildren).forEach(function (child) {\n      if (React.isValidElement(child) && child.props.fill) {\n        maybeAddBody(); // Remove the child's unknown `fill` prop.\n\n        children.push(cloneElement(child, {\n          fill: undefined\n        }));\n        return;\n      }\n\n      bodyChildren.push(child);\n    });\n    maybeAddBody();\n    return children;\n  };\n\n  Panel.prototype.renderCollapsibleBody = function renderCollapsibleBody(id, expanded, role, children, bsProps, animationHooks) {\n    return React.createElement(Collapse, _extends({\n      'in': expanded\n    }, animationHooks), React.createElement('div', {\n      id: id,\n      role: role,\n      className: prefix(bsProps, 'collapse'),\n      'aria-hidden': !expanded\n    }, this.renderBody(children, bsProps)));\n  };\n\n  Panel.prototype.renderHeader = function renderHeader(collapsible, header, id, role, expanded, bsProps) {\n    var titleClassName = prefix(bsProps, 'title');\n\n    if (!collapsible) {\n      if (!React.isValidElement(header)) {\n        return header;\n      }\n\n      return cloneElement(header, {\n        className: classNames(header.props.className, titleClassName)\n      });\n    }\n\n    if (!React.isValidElement(header)) {\n      return React.createElement('h4', {\n        role: 'presentation',\n        className: titleClassName\n      }, this.renderAnchor(header, id, role, expanded));\n    }\n\n    return cloneElement(header, {\n      className: classNames(header.props.className, titleClassName),\n      children: this.renderAnchor(header.props.children, id, role, expanded)\n    });\n  };\n\n  Panel.prototype.render = function render() {\n    var _props = this.props,\n        collapsible = _props.collapsible,\n        header = _props.header,\n        id = _props.id,\n        footer = _props.footer,\n        propsExpanded = _props.expanded,\n        headerRole = _props.headerRole,\n        panelRole = _props.panelRole,\n        className = _props.className,\n        children = _props.children,\n        onEnter = _props.onEnter,\n        onEntering = _props.onEntering,\n        onEntered = _props.onEntered,\n        onExit = _props.onExit,\n        onExiting = _props.onExiting,\n        onExited = _props.onExited,\n        props = _objectWithoutProperties(_props, ['collapsible', 'header', 'id', 'footer', 'expanded', 'headerRole', 'panelRole', 'className', 'children', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['defaultExpanded', 'eventKey', 'onSelect']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    var expanded = propsExpanded != null ? propsExpanded : this.state.expanded;\n    var classes = getClassSet(bsProps);\n    return React.createElement('div', _extends({}, elementProps, {\n      className: classNames(className, classes),\n      id: collapsible ? null : id\n    }), header && React.createElement('div', {\n      className: prefix(bsProps, 'heading')\n    }, this.renderHeader(collapsible, header, id, headerRole, expanded, bsProps)), collapsible ? this.renderCollapsibleBody(id, expanded, panelRole, children, bsProps, {\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    }) : this.renderBody(children, bsProps), footer && React.createElement('div', {\n      className: prefix(bsProps, 'footer')\n    }, footer));\n  };\n\n  return Panel;\n}(React.Component);\n\nPanel.propTypes = propTypes;\nPanel.defaultProps = defaultProps;\nexport default bsClass('panel', bsStyles([].concat(_Object$values(State), [Style.DEFAULT, Style.PRIMARY]), Style.DEFAULT, Panel));","map":null,"metadata":{},"sourceType":"module"}