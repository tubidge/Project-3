{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport PaginationButton from './PaginationButton';\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  activePage: PropTypes.number,\n  items: PropTypes.number,\n  maxButtons: PropTypes.number,\n\n  /**\n   * When `true`, will display the first and the last button page when\n   * displaying ellipsis.\n   */\n  boundaryLinks: PropTypes.bool,\n\n  /**\n   * When `true`, will display the default node value ('&hellip;').\n   * Otherwise, will display provided node (when specified).\n   */\n  ellipsis: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * When `true`, will display the default node value ('&laquo;').\n   * Otherwise, will display provided node (when specified).\n   */\n  first: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * When `true`, will display the default node value ('&raquo;').\n   * Otherwise, will display provided node (when specified).\n   */\n  last: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * When `true`, will display the default node value ('&lsaquo;').\n   * Otherwise, will display provided node (when specified).\n   */\n  prev: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n\n  /**\n   * When `true`, will display the default node value ('&rsaquo;').\n   * Otherwise, will display provided node (when specified).\n   */\n  next: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  onSelect: PropTypes.func,\n\n  /**\n   * You can use a custom element for the buttons\n   */\n  buttonComponentClass: elementType\n};\nvar defaultProps = {\n  activePage: 1,\n  items: 1,\n  maxButtons: 0,\n  first: false,\n  last: false,\n  prev: false,\n  next: false,\n  ellipsis: true,\n  boundaryLinks: false\n};\n\nvar Pagination = function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  function Pagination() {\n    _classCallCheck(this, Pagination);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Pagination.prototype.renderPageButtons = function renderPageButtons(activePage, items, maxButtons, boundaryLinks, ellipsis, buttonProps) {\n    var pageButtons = [];\n    var startPage = void 0;\n    var endPage = void 0;\n\n    if (maxButtons && maxButtons < items) {\n      startPage = Math.max(Math.min(activePage - Math.floor(maxButtons / 2, 10), items - maxButtons + 1), 1);\n      endPage = startPage + maxButtons - 1;\n    } else {\n      startPage = 1;\n      endPage = items;\n    }\n\n    for (var page = startPage; page <= endPage; ++page) {\n      pageButtons.push(React.createElement(PaginationButton, _extends({}, buttonProps, {\n        key: page,\n        eventKey: page,\n        active: page === activePage\n      }), page));\n    }\n\n    if (ellipsis && boundaryLinks && startPage > 1) {\n      if (startPage > 2) {\n        pageButtons.unshift(React.createElement(PaginationButton, {\n          key: 'ellipsisFirst',\n          disabled: true,\n          componentClass: buttonProps.componentClass\n        }, React.createElement('span', {\n          'aria-label': 'More'\n        }, ellipsis === true ? \"\\u2026\" : ellipsis)));\n      }\n\n      pageButtons.unshift(React.createElement(PaginationButton, _extends({}, buttonProps, {\n        key: 1,\n        eventKey: 1,\n        active: false\n      }), '1'));\n    }\n\n    if (ellipsis && endPage < items) {\n      if (!boundaryLinks || endPage < items - 1) {\n        pageButtons.push(React.createElement(PaginationButton, {\n          key: 'ellipsis',\n          disabled: true,\n          componentClass: buttonProps.componentClass\n        }, React.createElement('span', {\n          'aria-label': 'More'\n        }, ellipsis === true ? \"\\u2026\" : ellipsis)));\n      }\n\n      if (boundaryLinks) {\n        pageButtons.push(React.createElement(PaginationButton, _extends({}, buttonProps, {\n          key: items,\n          eventKey: items,\n          active: false\n        }), items));\n      }\n    }\n\n    return pageButtons;\n  };\n\n  Pagination.prototype.render = function render() {\n    var _props = this.props,\n        activePage = _props.activePage,\n        items = _props.items,\n        maxButtons = _props.maxButtons,\n        boundaryLinks = _props.boundaryLinks,\n        ellipsis = _props.ellipsis,\n        first = _props.first,\n        last = _props.last,\n        prev = _props.prev,\n        next = _props.next,\n        onSelect = _props.onSelect,\n        buttonComponentClass = _props.buttonComponentClass,\n        className = _props.className,\n        props = _objectWithoutProperties(_props, ['activePage', 'items', 'maxButtons', 'boundaryLinks', 'ellipsis', 'first', 'last', 'prev', 'next', 'onSelect', 'buttonComponentClass', 'className']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = getClassSet(bsProps);\n    var buttonProps = {\n      onSelect: onSelect,\n      componentClass: buttonComponentClass\n    };\n    return React.createElement('ul', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), first && React.createElement(PaginationButton, _extends({}, buttonProps, {\n      eventKey: 1,\n      disabled: activePage === 1\n    }), React.createElement('span', {\n      'aria-label': 'First'\n    }, first === true ? '\\xAB' : first)), prev && React.createElement(PaginationButton, _extends({}, buttonProps, {\n      eventKey: activePage - 1,\n      disabled: activePage === 1\n    }), React.createElement('span', {\n      'aria-label': 'Previous'\n    }, prev === true ? \"\\u2039\" : prev)), this.renderPageButtons(activePage, items, maxButtons, boundaryLinks, ellipsis, buttonProps), next && React.createElement(PaginationButton, _extends({}, buttonProps, {\n      eventKey: activePage + 1,\n      disabled: activePage >= items\n    }), React.createElement('span', {\n      'aria-label': 'Next'\n    }, next === true ? \"\\u203A\" : next)), last && React.createElement(PaginationButton, _extends({}, buttonProps, {\n      eventKey: items,\n      disabled: activePage >= items\n    }), React.createElement('span', {\n      'aria-label': 'Last'\n    }, last === true ? '\\xBB' : last)));\n  };\n\n  return Pagination;\n}(React.Component);\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default bsClass('pagination', Pagination);","map":null,"metadata":{},"sourceType":"module"}